import streamlit as st
import google.generativeai as genai
import os
from dotenv import load_dotenv
import json

# Load environment variables
load_dotenv()
genai.configure(api_key=os.getenv("GEMINI_API_KEY"))

# Thi·∫øt l·∫≠p c·∫•u h√¨nh trang
st.set_page_config(page_title="ChatGPT Clone with Gemini", layout="wide")

# Ti√™u ƒë·ªÅ ·ª©ng d·ª•ng
st.title("üß† ChatGPT UI Clone with Streamlit & Gemini")

# H√†m x·ª≠ l√Ω ph·∫£n h·ªìi c·ªßa chatbot
def generate_bot_response(user_input):
    try:
        # T·∫°o conversation history t·ª´ session state
        conversation = [
            {"role": msg["role"], "parts": [msg["content"]]}
            for msg in st.session_state.chat_history
        ]
        # Th√™m ƒë·∫ßu v√†o hi·ªán t·∫°i c·ªßa ng∆∞·ªùi d√πng
        conversation.append({"role": "user", "parts": [user_input]})

        # Kh·ªüi t·∫°o model Gemini
        model = genai.GenerativeModel("gemini-1.5-flash")
        
        # T·∫°o n·ªôi dung h·ªôi tho·∫°i ƒë·ªÉ g·ª≠i t·ªõi API
        chat = model.start_chat(history=conversation)
        response = chat.send_message(user_input)
        
        # L√†m s·∫°ch ph·∫£n h·ªìi
        bot_response = response.text.replace("*", "").strip()
        return bot_response
    except Exception as e:
        return f"ƒê√£ x·∫£y ra l·ªói: {str(e)}"

# H√†m l∆∞u l·ªãch s·ª≠ chat v√†o file JSON
def save_chat_history():
    with open("chat_history.json", "w", encoding="utf-8") as f:
        json.dump(st.session_state.chat_history, f, ensure_ascii=False, indent=2)

# H√†m t·∫£i l·ªãch s·ª≠ chat t·ª´ file JSON
def load_chat_history():
    try:
        with open("chat_history.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return []

# Kh·ªüi t·∫°o session state ƒë·ªÉ l∆∞u l·ªãch s·ª≠ chat
if "chat_history" not in st.session_state:
    st.session_state.chat_history = load_chat_history()

# Hi·ªÉn th·ªã l·ªãch s·ª≠ chat
for message in st.session_state.chat_history:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# Nh·∫≠n ƒë·∫ßu v√†o t·ª´ ng∆∞·ªùi d√πng
prompt = st.chat_input("Nh·∫≠p tin nh·∫Øn c·ªßa b·∫°n...")

if prompt:
    # L∆∞u tin nh·∫Øn ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠
    st.session_state.chat_history.append({"role": "user", "content": prompt})
    
    # Hi·ªÉn th·ªã tin nh·∫Øn ng∆∞·ªùi d√πng
    with st.chat_message("user"):
        st.markdown(prompt)
    
    # G·ªçi h√†m generate_bot_response ƒë·ªÉ l·∫•y ph·∫£n h·ªìi t·ª´ Gemini
    response = generate_bot_response(prompt)
    
    # Hi·ªÉn th·ªã ph·∫£n h·ªìi c·ªßa chatbot
    with st.chat_message("assistant"):
        st.markdown(response)
    
    # L∆∞u ph·∫£n h·ªìi v√†o l·ªãch s·ª≠ chat
    st.session_state.chat_history.append({"role": "assistant", "content": response})
    
    # L∆∞u l·ªãch s·ª≠ chat v√†o file JSON
    save_chat_history()

# N√∫t x√≥a l·ªãch s·ª≠ chat
if st.button("X√≥a l·ªãch s·ª≠ chat"):
    st.session_state.chat_history = []
    if os.path.exists("chat_history.json"):
        os.remove("chat_history.json")
    st.rerun()